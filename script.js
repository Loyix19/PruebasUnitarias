// =================================================================
// script.js
// Funcionalidad Principal
// =================================================================

/**
 * Funci√≥n para generar un n√∫mero entero aleatorio entre min (incluido) y max (incluido)
 * @param {number} min - L√≠mite inferior (incluido).
 * @param {number} max - L√≠mite superior (incluido).
 * @returns {number} N√∫mero entero aleatorio.
 */
function getRandomInt(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    // F√≥rmula: Math.floor(Math.random() * (max - min + 1)) + min;
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

/**
 * Funci√≥n principal para generar y mostrar la ecuaci√≥n cuadr√°tica en el DOM.
 */
function generarEcuacionAleatoria() {
    // 1. Generar valores aleatorios para a, b, y c (entre 1 y 20)
    // 'a' es diferente de cero (garantizado por el rango [1, 20])
    const a = getRandomInt(1, 20);
    const b = getRandomInt(1, 20);
    const c = getRandomInt(1, 20);
    
    // 2. Construir la cadena de la ecuaci√≥n (con super√≠ndice para HTML)
    const ecuacion = `${a}x<sup>2</sup> + ${b}x + ${c} = 0`;

    // 3. Insertar la ecuaci√≥n en el elemento HTML
    const contenedor = document.getElementById('ecuacionAleatoria');
    if (contenedor) {
        contenedor.innerHTML = ecuacion;
    } else {
        console.error("No se encontr√≥ el elemento con el ID 'ecuacionAleatoria'.");
    }
}

// Ejecutar la funci√≥n principal cuando el DOM est√© completamente cargado
document.addEventListener('DOMContentLoaded', generarEcuacionAleatoria);


// =================================================================
// PRUEBAS (Unitarias, Integraci√≥n y Rendimiento)
// Los resultados de estas pruebas se mostrar√°n en la Consola del Navegador.
// =================================================================

// 1. PRUEBA UNITARIA: Validar la precisi√≥n y l√≠mites de getRandomInt.
function probarGetRandomInt() {
    console.log("\n--- 1. Ejecutando Prueba Unitaria para getRandomInt ---");
    const min = 5;
    const max = 10;
    const numTests = 1000;
    let passed = true;
    let gotMin = false;
    let gotMax = false;

    for (let i = 0; i < numTests; i++) {
        const result = getRandomInt(min, max);

        // A. Verificar que el resultado sea un entero
        if (!Number.isInteger(result)) {
            passed = false;
            console.error(`‚ùå FALLO: El resultado ${result} no es un entero.`);
            break;
        }

        // B. Verificar que el resultado est√© dentro del rango [min, max]
        if (result < min || result > max) {
            passed = false;
            console.error(`‚ùå FALLO: El resultado ${result} est√° fuera del rango [${min}, ${max}].`);
            break;
        }

        // C. Registrar si se obtuvieron los l√≠mites (estad√≠stico)
        if (result === min) { gotMin = true; }
        if (result === max) { gotMax = true; }
    }

    if (passed) {
        console.log(`‚úÖ √âXITO: getRandomInt() pasa la prueba de rango [${min}, ${max}] en ${numTests} repeticiones.`);
        if (!gotMin || !gotMax) {
             console.warn(`‚ö†Ô∏è Advertencia Estad√≠stica: No se observaron ambos l√≠mites (Min: ${gotMin}, Max: ${gotMax}).`);
        }
    } else {
        console.error("‚ùå FALLO: La prueba unitaria de getRandomInt ha fallado en alguna validaci√≥n.");
    }
}

// 2. CASO DE PRUEBA DE INTEGRACI√ìN: Validar la salida de generarEcuacionAleatoria.
function probarGeneracionEcuacion() {
    console.log("\n--- 2. Ejecutando Caso de Prueba de Integraci√≥n para generarEcuacionAleatoria ---");
    
    // Ejecutar la funci√≥n para garantizar la generaci√≥n
    generarEcuacionAleatoria(); 

    const contenedor = document.getElementById('ecuacionAleatoria');
    if (!contenedor) {
        console.error("‚ùå FALLO: No se encontr√≥ el elemento 'ecuacionAleatoria'.");
        return;
    }
    
    const ecuacionHTML = contenedor.innerHTML.trim();
    // Patr√≥n: (N√∫m 1-20)x¬≤ + (N√∫m 1-20)x + (N√∫m 1-20) = 0
    const patron = /^(\d{1,2})x<sup>2<\/sup> \+ (\d{1,2})x \+ (\d{1,2}) = 0$/;
    const match = ecuacionHTML.match(patron);

    if (match) {
        const a = parseInt(match[1]);
        const b = parseInt(match[2]);
        const c = parseInt(match[3]);

        // Verificaci√≥n de los rangos [1, 20]
        const a_ok = (a >= 1 && a <= 20);
        const b_ok = (b >= 1 && b <= 20);
        const c_ok = (c >= 1 && c <= 20);

        if (a_ok && b_ok && c_ok) {
            console.log(`‚úÖ √âXITO: La integraci√≥n de la generaci√≥n de la ecuaci√≥n ha pasado.`);
            console.log(`- Formato de Ecuaci√≥n y Rangos de Coeficientes son correctos. Ejemplo: ${ecuacionHTML}`);
        } else {
            console.error(`‚ùå FALLO: Coeficientes fuera de rango [1, 20]: a=${a}, b=${b}, c=${c}`);
        }
    } else {
        console.error(`‚ùå FALLO: El formato de la ecuaci√≥n generada es incorrecto. Resultado obtenido: "${ecuacionHTML}"`);
    }
}

// 3. PROPUESTA DE PRUEBA DE RENDIMIENTO: Medir la latencia de getRandomInt.
function probarRendimientoGetRandomInt(numRepeticiones) {
    console.log(`\n--- 3. Ejecutando Prueba de Rendimiento para getRandomInt (${numRepeticiones} veces) ---`);

    const min = 1;
    const max = 100000;
    
    // performance.now() ofrece alta precisi√≥n para medir el tiempo
    const startTime = performance.now(); 

    // Bucle de carga
    for (let i = 0; i < numRepeticiones; i++) {
        getRandomInt(min, max);
    }

    const endTime = performance.now();
    const tiempoTotal = endTime - startTime; 
    const tiempoPorOperacion = tiempoTotal / numRepeticiones;

    console.log(`üìä Rendimiento: Generaci√≥n de ${numRepeticiones} enteros aleatorios completada.`);
    console.log(`- Tiempo Total: ${tiempoTotal.toFixed(3)} ms`);
    console.log(`- Latencia Promedio (por operaci√≥n): ${tiempoPorOperacion.toFixed(6)} ms`);
    
    if (tiempoTotal < 100) { 
            console.log("‚úÖ √âXITO en Rendimiento: El c√°lculo es muy r√°pido. < 100ms para 100k iteraciones.");
    } else {
            console.warn("‚ö†Ô∏è Advertencia de Rendimiento: El c√°lculo es relativamente lento. Revisar si se requieren millones de llamadas por segundo.");
    }
}

// Ejecutar todas las pruebas una vez que el DOM est√© cargado (despu√©s de la funci√≥n principal)
document.addEventListener('DOMContentLoaded', () => {
    // Las funciones de prueba se llaman despu√©s de que la interfaz ya se ha generado
    probarGetRandomInt(); 
    probarGeneracionEcuacion();
    probarRendimientoGetRandomInt(100000); 
});